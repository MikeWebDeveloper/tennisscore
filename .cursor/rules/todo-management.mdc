---
alwaysApply: true
---

# AI Agent To-Do List Management Rules

## When to Use To-Do Lists

### **MUST Use To-Do Lists For:**
1. **Complex multi-step tasks** (3+ distinct steps)
2. **Non-trivial tasks** requiring careful planning
3. **User explicitly requests** todo list
4. **User provides multiple tasks** (numbered/comma-separated)
5. **After receiving new instructions** - capture requirements as todos
6. **After completing tasks** - mark complete with merge=true and add follow-ups
7. **When starting new tasks** - mark as in_progress (ideally only one at a time)

### **DO NOT Use To-Do Lists For:**
1. **Single, straightforward tasks**
2. **Trivial tasks** with no organizational benefit
3. **Tasks completable in < 3 trivial steps**
4. **Purely conversational/informational requests**
5. **Don't add a task to test the change** unless asked, or you'll overfocus on testing

## To-Do List Best Practices

### **Task States and Management**
- **pending**: Not yet started
- **in_progress**: Currently working on (only ONE task at a time)
- **completed**: Finished successfully
- **cancelled**: No longer needed

### **Task Creation Guidelines**
```typescript
// Example: Complex feature implementation
[
  {"id": "analyze-requirements", "content": "Analyze user requirements and existing code", "status": "pending", "dependencies": []},
  {"id": "design-solution", "content": "Design implementation approach", "status": "pending", "dependencies": ["analyze-requirements"]},
  {"id": "implement-feature", "content": "Implement the core functionality", "status": "pending", "dependencies": ["design-solution"]},
  {"id": "test-implementation", "content": "Test the implementation thoroughly", "status": "pending", "dependencies": ["implement-feature"]},
  {"id": "commit-changes", "content": "Commit changes with descriptive message", "status": "pending", "dependencies": ["test-implementation"]}
]
```

### **Task Management Rules**
1. **Update status in real-time** as you work
2. **Mark complete IMMEDIATELY** after finishing
3. **Only ONE task in_progress** at a time
4. **Complete current tasks** before starting new ones
5. **Use meaningful, specific task descriptions**
6. **Break complex tasks** into manageable steps
7. **Set dependencies** for natural prerequisites only

### **Task Dependencies**
- Use `dependencies` field for natural prerequisites
- Avoid circular dependencies
- Independent tasks can run in parallel
- Dependencies should reflect logical workflow, not arbitrary ordering

## Implementation Examples

### **Good To-Do Usage**
```typescript
// User: "Add dark mode toggle, fix the login bug, and update the readme"
todo_write({
  "merge": false,
  "todos": [
    {"id": "implement-dark-mode", "content": "Add dark mode toggle to settings", "status": "pending", "dependencies": []},
    {"id": "fix-login-bug", "content": "Debug and fix login authentication issue", "status": "pending", "dependencies": []},
    {"id": "update-readme", "content": "Update README with new features and setup instructions", "status": "pending", "dependencies": ["implement-dark-mode"]}
  ]
})
```

### **Bad To-Do Usage (Don't Do This)**
```typescript
// User: "Fix this typo in the header"
// DON'T create a todo for simple one-step tasks
```

### **Status Updates During Work**
```typescript
// Mark task as started
{"id": "implement-dark-mode", "status": "in_progress"}

// Mark as completed when done
{"id": "implement-dark-mode", "status": "completed"}

// Start next task
{"id": "fix-login-bug", "status": "in_progress"}
```

## Real-World Examples from TennisScore Project

### **Dashboard Add Player Button Fix**
```typescript
[
  {"id": "fix-add-player-button", "content": "Fix Add Player button on dashboard page that leads to blank page", "status": "completed", "dependencies": []},
  {"id": "investigate-dashboard-add-player", "content": "Investigate dashboard Add Player button implementation and routing", "status": "completed", "dependencies": []},
  {"id": "fix-player-creation-navigation", "content": "Fix navigation to proper player creation component/page", "status": "completed", "dependencies": ["investigate-dashboard-add-player"]}
]
```

### **Translation Audit Project**
```typescript
[
  {"id": "translation-audit", "content": "Audit entire application for hardcoded English text needing translation", "status": "completed", "dependencies": []},
  {"id": "test-english-mode", "content": "Test application in English mode to identify untranslated text", "status": "completed", "dependencies": []},
  {"id": "test-czech-mode", "content": "Test application in Czech mode to identify missing translations", "status": "completed", "dependencies": []},
  {"id": "add-missing-translations", "content": "Add missing translation keys to i18n.ts for both English and Czech", "status": "completed", "dependencies": ["test-english-mode", "test-czech-mode"]},
  {"id": "update-components-with-translations", "content": "Update components with hardcoded text to use translation keys", "status": "completed", "dependencies": ["add-missing-translations"]}
]
```

## Key Principles

1. **Proactive Planning**: Use todos to demonstrate thoroughness and organization
2. **Clear Progression**: Show logical task flow through dependencies
3. **Real-Time Updates**: Keep status current as work progresses
4. **Meaningful Granularity**: Tasks should be substantial but achievable
5. **User Communication**: Todos help users understand scope and progress

**When in doubt, use this tool.** Proactive task management demonstrates attentiveness and ensures complete requirements coverage.
# AI Agent To-Do List Management Rules

## When to Use To-Do Lists

### **MUST Use To-Do Lists For:**
1. **Complex multi-step tasks** (3+ distinct steps)
2. **Non-trivial tasks** requiring careful planning
3. **User explicitly requests** todo list
4. **User provides multiple tasks** (numbered/comma-separated)
5. **After receiving new instructions** - capture requirements as todos
6. **After completing tasks** - mark complete with merge=true and add follow-ups
7. **When starting new tasks** - mark as in_progress (ideally only one at a time)

### **DO NOT Use To-Do Lists For:**
1. **Single, straightforward tasks**
2. **Trivial tasks** with no organizational benefit
3. **Tasks completable in < 3 trivial steps**
4. **Purely conversational/informational requests**
5. **Don't add a task to test the change** unless asked, or you'll overfocus on testing

## To-Do List Best Practices

### **Task States and Management**
- **pending**: Not yet started
- **in_progress**: Currently working on (only ONE task at a time)
- **completed**: Finished successfully
- **cancelled**: No longer needed

### **Task Creation Guidelines**
```typescript
// Example: Complex feature implementation
[
  {"id": "analyze-requirements", "content": "Analyze user requirements and existing code", "status": "pending", "dependencies": []},
  {"id": "design-solution", "content": "Design implementation approach", "status": "pending", "dependencies": ["analyze-requirements"]},
  {"id": "implement-feature", "content": "Implement the core functionality", "status": "pending", "dependencies": ["design-solution"]},
  {"id": "test-implementation", "content": "Test the implementation thoroughly", "status": "pending", "dependencies": ["implement-feature"]},
  {"id": "commit-changes", "content": "Commit changes with descriptive message", "status": "pending", "dependencies": ["test-implementation"]}
]
```

### **Task Management Rules**
1. **Update status in real-time** as you work
2. **Mark complete IMMEDIATELY** after finishing
3. **Only ONE task in_progress** at a time
4. **Complete current tasks** before starting new ones
5. **Use meaningful, specific task descriptions**
6. **Break complex tasks** into manageable steps
7. **Set dependencies** for natural prerequisites only

### **Task Dependencies**
- Use `dependencies` field for natural prerequisites
- Avoid circular dependencies
- Independent tasks can run in parallel
- Dependencies should reflect logical workflow, not arbitrary ordering

## Implementation Examples

### **Good To-Do Usage**
```typescript
// User: "Add dark mode toggle, fix the login bug, and update the readme"
todo_write({
  "merge": false,
  "todos": [
    {"id": "implement-dark-mode", "content": "Add dark mode toggle to settings", "status": "pending", "dependencies": []},
    {"id": "fix-login-bug", "content": "Debug and fix login authentication issue", "status": "pending", "dependencies": []},
    {"id": "update-readme", "content": "Update README with new features and setup instructions", "status": "pending", "dependencies": ["implement-dark-mode"]}
  ]
})
```

### **Bad To-Do Usage (Don't Do This)**
```typescript
// User: "Fix this typo in the header"
// DON'T create a todo for simple one-step tasks
```

### **Status Updates During Work**
```typescript
// Mark task as started
{"id": "implement-dark-mode", "status": "in_progress"}

// Mark as completed when done
{"id": "implement-dark-mode", "status": "completed"}

// Start next task
{"id": "fix-login-bug", "status": "in_progress"}
```

## Real-World Examples from TennisScore Project

### **Dashboard Add Player Button Fix**
```typescript
[
  {"id": "fix-add-player-button", "content": "Fix Add Player button on dashboard page that leads to blank page", "status": "completed", "dependencies": []},
  {"id": "investigate-dashboard-add-player", "content": "Investigate dashboard Add Player button implementation and routing", "status": "completed", "dependencies": []},
  {"id": "fix-player-creation-navigation", "content": "Fix navigation to proper player creation component/page", "status": "completed", "dependencies": ["investigate-dashboard-add-player"]}
]
```

### **Translation Audit Project**
```typescript
[
  {"id": "translation-audit", "content": "Audit entire application for hardcoded English text needing translation", "status": "completed", "dependencies": []},
  {"id": "test-english-mode", "content": "Test application in English mode to identify untranslated text", "status": "completed", "dependencies": []},
  {"id": "test-czech-mode", "content": "Test application in Czech mode to identify missing translations", "status": "completed", "dependencies": []},
  {"id": "add-missing-translations", "content": "Add missing translation keys to i18n.ts for both English and Czech", "status": "completed", "dependencies": ["test-english-mode", "test-czech-mode"]},
  {"id": "update-components-with-translations", "content": "Update components with hardcoded text to use translation keys", "status": "completed", "dependencies": ["add-missing-translations"]}
]
```

## Key Principles

1. **Proactive Planning**: Use todos to demonstrate thoroughness and organization
2. **Clear Progression**: Show logical task flow through dependencies
3. **Real-Time Updates**: Keep status current as work progresses
4. **Meaningful Granularity**: Tasks should be substantial but achievable
5. **User Communication**: Todos help users understand scope and progress

**When in doubt, use this tool.** Proactive task management demonstrates attentiveness and ensures complete requirements coverage.
