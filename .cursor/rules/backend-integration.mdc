---
alwaysApply: false
---
# TennisScore Backend Integration Rules

## Server Actions Patterns

### Authentication Actions
```typescript
// /src/lib/actions/auth.ts
"use server"

import { cookies } from "next/headers"
import { redirect } from "next/navigation"
import { createAdminClient } from "@/lib/appwrite-server"

export async function signUp(formData: FormData) {
  const { account } = await createAdminClient()
  
  const email = formData.get("email") as string
  const password = formData.get("password") as string
  
  try {
    const user = await account.create("unique()", email, password)
    const session = await account.createEmailPasswordSession(email, password)
    
    cookies().set("session", session.secret, {
      httpOnly: true,
      secure: true,
      sameSite: "strict",
      maxAge: 60 * 60 * 24 * 30, // 30 days
      path: "/"
    })
    
    redirect("/dashboard")
  } catch (error) {
    return { error: error.message }
  }
}

export async function signOut() {
  const { account } = await createAdminClient()
  
  try {
    await account.deleteSession("current")
    cookies().delete("session")
    redirect("/login")
  } catch (error) {
    redirect("/login")
  }
}
```

### Player Management Actions
```typescript
// /src/lib/actions/players.ts
"use server"

import { ID } from "node-appwrite"
import { createAdminClient } from "@/lib/appwrite-server"
import { getCurrentUser } from "@/lib/auth"
import { z } from "zod"

const playerSchema = z.object({
  firstName: z.string().min(1),
  lastName: z.string().min(1),
  yearOfBirth: z.number().optional(),
  rating: z.string().optional(),
})

export async function createPlayer(formData: FormData) {
  const user = await getCurrentUser()
  if (!user) throw new Error("Unauthorized")
  
  const data = Object.fromEntries(formData)
  const validatedData = playerSchema.parse(data)
  
  const { databases } = await createAdminClient()
  
  try {
    const player = await databases.createDocument(
      process.env.APPWRITE_DATABASE_ID!,
      process.env.APPWRITE_PLAYERS_COLLECTION_ID!,
      ID.unique(),
      {
        ...validatedData,
        userId: user.$id,
      }
    )
    
    return { success: true, player }
  } catch (error) {
    return { error: error.message }
  }
}

export async function getPlayersByUser() {
  const user = await getCurrentUser()
  if (!user) throw new Error("Unauthorized")
  
  const { databases } = await createAdminClient()
  
  try {
    const response = await databases.listDocuments(
      process.env.APPWRITE_DATABASE_ID!,
      process.env.APPWRITE_PLAYERS_COLLECTION_ID!,
      [Query.equal("userId", user.$id)]
    )
    
    return response.documents
  } catch (error) {
    throw new Error("Failed to fetch players")
  }
}
```

### Match Scoring Actions
```typescript
// /src/lib/actions/matches.ts
"use server"

import { ID } from "node-appwrite"
import { createAdminClient } from "@/lib/appwrite-server"
import { getCurrentUser } from "@/lib/auth"

export async function createMatch(matchData: {
  playerOneId: string
  playerTwoId: string
  matchFormat: object
}) {
  const user = await getCurrentUser()
  if (!user) throw new Error("Unauthorized")
  
  const { databases } = await createAdminClient()
  
  try {
    const match = await databases.createDocument(
      process.env.APPWRITE_DATABASE_ID!,
      process.env.APPWRITE_MATCHES_COLLECTION_ID!,
      ID.unique(),
      {
        ...matchData,
        matchDate: new Date().toISOString(),
        status: "In Progress",
        score: JSON.stringify({ sets: [], games: [], points: [] }),
        pointLog: [],
        events: [],
        userId: user.$id,
      }
    )
    
    return { success: true, matchId: match.$id }
  } catch (error) {
    return { error: error.message }
  }
}

export async function updateMatchScore(matchId: string, scoreUpdate: {
  score: object
  pointLog: object[]
}) {
  const user = await getCurrentUser()
  if (!user) throw new Error("Unauthorized")
  
  const { databases } = await createAdminClient()
  
  try {
    const match = await databases.updateDocument(
      process.env.APPWRITE_DATABASE_ID!,
      process.env.APPWRITE_MATCHES_COLLECTION_ID!,
      matchId,
      {
        score: JSON.stringify(scoreUpdate.score),
        pointLog: scoreUpdate.pointLog,
      }
    )
    
    return { success: true, match }
  } catch (error) {
    return { error: error.message }
  }
}
```

## Appwrite Client Configuration

### Server SDK Setup
```typescript
// /src/lib/appwrite-server.ts
import { Client, Account, Databases, Storage } from "node-appwrite"

export async function createAdminClient() {
  const client = new Client()
    .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT!)
    .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT!)
    .setKey(process.env.APPWRITE_API_KEY!) // Secret server key

  return {
    client,
    account: new Account(client),
    databases: new Databases(client),
    storage: new Storage(client),
  }
}
```

### Client SDK Setup
```typescript
// /src/lib/appwrite-client.ts
import { Client, Account, Databases, Storage } from "appwrite"

const client = new Client()
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT!)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT!)

export const account = new Account(client)
export const databases = new Databases(client)
export const storage = new Storage(client)

export { client }
```

## Authentication Utilities

### Session Management
```typescript
// /src/lib/auth.ts
import { cookies } from "next/headers"
import { createAdminClient } from "./appwrite-server"

export async function getCurrentUser() {
  try {
    const sessionCookie = cookies().get("session")
    if (!sessionCookie) return null

    const { account } = await createAdminClient()
    const user = await account.get()
    
    return user
  } catch (error) {
    return null
  }
}

export async function requireAuth() {
  const user = await getCurrentUser()
  if (!user) {
    redirect("/login")
  }
  return user
}
```

### Middleware for Route Protection
```typescript
// /src/middleware.ts
import { NextRequest, NextResponse } from "next/server"

export async function middleware(request: NextRequest) {
  const sessionCookie = request.cookies.get("session")
  const { pathname } = request.nextUrl

  // Protected routes
  const protectedRoutes = ["/dashboard", "/matches"]
  const isProtectedRoute = protectedRoutes.some(route => 
    pathname.startsWith(route)
  )

  // Auth routes
  const authRoutes = ["/login", "/signup"]
  const isAuthRoute = authRoutes.includes(pathname)

  if (isProtectedRoute && !sessionCookie) {
    return NextResponse.redirect(new URL("/login", request.url))
  }

  if (isAuthRoute && sessionCookie) {
    return NextResponse.redirect(new URL("/dashboard", request.url))
  }

  return NextResponse.next()
}

export const config = {
  matcher: [
    "/((?!api|_next/static|_next/image|favicon.ico|live).*)",
  ]
}
```

## Data Fetching Patterns

### Server Component Data Fetching
```typescript
// In page.tsx (Server Component)
import { getCurrentUser } from "@/lib/auth"
import { createAdminClient } from "@/lib/appwrite-server"
import { Query } from "node-appwrite"

export default async function DashboardPage() {
  const user = await getCurrentUser()
  if (!user) redirect("/login")

  const { databases } = await createAdminClient()
  
  // Fetch user's players
  const playersResponse = await databases.listDocuments(
    process.env.APPWRITE_DATABASE_ID!,
    process.env.APPWRITE_PLAYERS_COLLECTION_ID!,
    [Query.equal("userId", user.$id)]
  )

  // Fetch user's matches
  const matchesResponse = await databases.listDocuments(
    process.env.APPWRITE_DATABASE_ID!,
    process.env.APPWRITE_MATCHES_COLLECTION_ID!,
    [Query.equal("userId", user.$id)]
  )

  return (
    <DashboardClient 
      players={playersResponse.documents}
      matches={matchesResponse.documents}
    />
  )
}
```

### Client Component Data Fetching
```typescript
// For client-side data fetching
"use client"

import { useEffect, useState } from "react"
import { databases } from "@/lib/appwrite-client"

export function useMatches() {
  const [matches, setMatches] = useState([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    async function fetchMatches() {
      try {
        const response = await databases.listDocuments(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID!,
          process.env.NEXT_PUBLIC_APPWRITE_MATCHES_COLLECTION_ID!
        )
        setMatches(response.documents)
      } catch (error) {
        console.error("Error fetching matches:", error)
      } finally {
        setLoading(false)
      }
    }

    fetchMatches()
  }, [])

  return { matches, loading }
}
```

## File Upload Patterns

### Profile Picture Upload
```typescript
// /src/lib/actions/upload.ts
"use server"

import { ID } from "node-appwrite"
import { createAdminClient } from "@/lib/appwrite-server"

export async function uploadProfilePicture(formData: FormData) {
  const file = formData.get("file") as File
  if (!file) throw new Error("No file provided")

  const { storage } = await createAdminClient()

  try {
    const uploadedFile = await storage.createFile(
      process.env.APPWRITE_PROFILE_PICTURES_BUCKET_ID!,
      ID.unique(),
      file
    )

    return { success: true, fileId: uploadedFile.$id }
  } catch (error) {
    return { error: error.message }
  }
}
```

## Realtime Integration

### Live Match Updates
```typescript
// Hook for real-time match updates
"use client"

import { useEffect, useState } from "react"
import { client } from "@/lib/appwrite-client"

export function useLiveMatch(matchId: string) {
  const [match, setMatch] = useState(null)
  const [connected, setConnected] = useState(false)

  useEffect(() => {
    const unsubscribe = client.subscribe(
      `databases.${process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID}.collections.${process.env.NEXT_PUBLIC_APPWRITE_MATCHES_COLLECTION_ID}.documents.${matchId}`,
      (response) => {
        if (response.events.includes('databases.*.collections.*.documents.*.update')) {
          setMatch(response.payload)
        }
        setConnected(true)
      }
    )

    return () => {
      unsubscribe()
      setConnected(false)
    }
  }, [matchId])

  return { match, connected }
}
```

## Error Handling

### Server Action Error Handling
```typescript
export async function safeAction<T>(action: () => Promise<T>) {
  try {
    return await action()
  } catch (error) {
    console.error("Server action error:", error)
    
    if (error.code === 401) {
      redirect("/login")
    }
    
    return { 
      error: error.message || "An unexpected error occurred" 
    }
  }
}
```

### Client Error Handling
```typescript
"use client"

export function useAsyncAction<T>(action: () => Promise<T>) {
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const execute = async () => {
    setLoading(true)
    setError(null)
    
    try {
      return await action()
    } catch (err) {
      setError(err.message)
      throw err
    } finally {
      setLoading(false)
    }
  }

  return { execute, loading, error }
}
```

## Environment Variables

### Required Environment Variables
```bash
# .env.local
NEXT_PUBLIC_APPWRITE_ENDPOINT=https://cloud.appwrite.io/v1
NEXT_PUBLIC_APPWRITE_PROJECT=your-project-id

# Server-only variables
APPWRITE_API_KEY=your-secret-api-key
APPWRITE_DATABASE_ID=your-database-id
APPWRITE_PLAYERS_COLLECTION_ID=players-collection-id
APPWRITE_MATCHES_COLLECTION_ID=matches-collection-id
APPWRITE_PROFILE_PICTURES_BUCKET_ID=profile-pictures-bucket-id
```
