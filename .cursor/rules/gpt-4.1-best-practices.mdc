---
alwaysApply: true
---

# ChatGPT 4.1 Coding Assistant: Enhanced Best Practices

## Model-Specific Guidance
This rule applies when the LLM model is **ChatGPT 4.1** (OpenAI) and is always included in the model context for this project.

## Coding Quality & Output
- **Reason before coding:** Analyze the problem and plan the solution before generating code or edits.
- **Prioritize correctness, robustness, and maintainability** in all code suggestions.
- **Follow project-specific conventions** and existing patterns inferred from the codebase.
- **Use descriptive variable and function names** (e.g., isLoading, hasError).
- **Annotate functions and components with types** (TypeScript, Python, etc.) where appropriate.
- **Write clear, concise docstrings and comments** for all new or modified code.
- **Prefer modern, idiomatic code** (e.g., functional React components, hooks, async/await, declarative JSX).
- **Use functional and declarative programming patterns; avoid classes unless required by the project.**
- **If a specific output format is required,** show a Markdown template or code block as an example.
- **Never include unnecessary explanations or apologies** in code output—be direct and relevant.
- **Avoid code duplication; modularize and reuse logic where possible.**
- **Use standard libraries and patterns when possible; avoid over-engineering.**
- **For UI:** Use Tailwind CSS, Shadcn UI, and Radix UI for styling and components if relevant to the project.

## Interaction & Workflow
- **Autonomously execute multi-step tasks** unless a critical ambiguity or blocker is encountered.
- **Ask for clarification only if absolutely necessary** to proceed.
- **Propose a clear plan before making major changes.**
- **Summarize key decisions and verification steps** after completing a task.
- **If a task requires more than three steps,** create and update a to-do list for progress tracking.
- **Always update or create tests and documentation** when adding or changing features.
- **Never repeat the same content in both instructions and documentation.**
- **Apply all modifications to a single file at once unless project context requires otherwise.**
- **Do not alter unrelated files.**

## Formatting & Style
- **Use Markdown for all output formatting.**
- **Highlight critical rules or steps in ALL CAPS** when needed for emphasis.
- **Show output format examples when relevant.**
- **Use natural language for explanations, but keep them concise and technical.**

## Error Handling & Debugging
- **Analyze the root cause of bugs before suggesting fixes.**
- **Provide precise, targeted solutions.**
- **Explain the reasoning behind bug fixes or refactors.**
- **Prioritize readability and maintainability in all fixes.**

## Project Context & Adaptation
- **Adapt to project-specific rules, folder structure, and technology stack.**
- **Reference project files using [filename.ext](mdc:filename.ext) when needed for context.**
- **If working in a subdirectory with its own rules, apply those in addition to this rule.**
- **Include project-specific context in code comments or docstrings when helpful.**

## Security & Privacy
- **Never display, log, or commit secrets, API keys, or personal data.**
- **Require explicit user confirmation for destructive or production-affecting actions.**

## Example: Output Format for a TypeScript Function
```typescript
/**
 * Calculates the sum of two numbers.
 * @param a - First number
 * @param b - Second number
 * @returns The sum of a and b
 */
export function add(a: number, b: number): number {
  return a + b;
}
```

## Example: To-Do List for Multi-Step Task
```json
[
  {"id": "analyze-requirements", "content": "Analyze requirements", "status": "pending", "dependencies": []},
  {"id": "implement-feature", "content": "Implement feature", "status": "pending", "dependencies": ["analyze-requirements"]},
  {"id": "test-feature", "content": "Test implementation", "status": "pending", "dependencies": ["implement-feature"]}
]
```

## References
- [OpenAI Platform Docs](https://platform.openai.com/docs/)
- [Continue Hub: Creating Rule Blocks](https://blog.continue.dev/creating-rule-blocks-on-continue-hub-a-developers-guide/)
- [Guide to Building Effective Custom GPTs](https://medium.com/design-bootcamp/guide-to-building-effective-custom-gpts-cf8d464ffbc1)
- [Cursor Official Docs: Rules for AI](https://docs.cursor.com/context/rules-for-ai)
- [Cursor 101: Customizing AI Behavior](https://cursor101.com/article/cursor-rules-customizing-ai-behavior)
# ChatGPT 4.1 Coding Assistant: Enhanced Best Practices

## Model-Specific Guidance
This rule applies when the LLM model is **ChatGPT 4.1** (OpenAI) and is always included in the model context for this project.

## Coding Quality & Output
- **Reason before coding:** Analyze the problem and plan the solution before generating code or edits.
- **Prioritize correctness, robustness, and maintainability** in all code suggestions.
- **Follow project-specific conventions** and existing patterns inferred from the codebase.
- **Use descriptive variable and function names** (e.g., isLoading, hasError).
- **Annotate functions and components with types** (TypeScript, Python, etc.) where appropriate.
- **Write clear, concise docstrings and comments** for all new or modified code.
- **Prefer modern, idiomatic code** (e.g., functional React components, hooks, async/await, declarative JSX).
- **Use functional and declarative programming patterns; avoid classes unless required by the project.**
- **If a specific output format is required,** show a Markdown template or code block as an example.
- **Never include unnecessary explanations or apologies** in code output—be direct and relevant.
- **Avoid code duplication; modularize and reuse logic where possible.**
- **Use standard libraries and patterns when possible; avoid over-engineering.**
- **For UI:** Use Tailwind CSS, Shadcn UI, and Radix UI for styling and components if relevant to the project.

## Interaction & Workflow
- **Autonomously execute multi-step tasks** unless a critical ambiguity or blocker is encountered.
- **Ask for clarification only if absolutely necessary** to proceed.
- **Propose a clear plan before making major changes.**
- **Summarize key decisions and verification steps** after completing a task.
- **If a task requires more than three steps,** create and update a to-do list for progress tracking.
- **Always update or create tests and documentation** when adding or changing features.
- **Never repeat the same content in both instructions and documentation.**
- **Apply all modifications to a single file at once unless project context requires otherwise.**
- **Do not alter unrelated files.**

## Formatting & Style
- **Use Markdown for all output formatting.**
- **Highlight critical rules or steps in ALL CAPS** when needed for emphasis.
- **Show output format examples when relevant.**
- **Use natural language for explanations, but keep them concise and technical.**

## Error Handling & Debugging
- **Analyze the root cause of bugs before suggesting fixes.**
- **Provide precise, targeted solutions.**
- **Explain the reasoning behind bug fixes or refactors.**
- **Prioritize readability and maintainability in all fixes.**

## Project Context & Adaptation
- **Adapt to project-specific rules, folder structure, and technology stack.**
- **Reference project files using [filename.ext](mdc:filename.ext) when needed for context.**
- **If working in a subdirectory with its own rules, apply those in addition to this rule.**
- **Include project-specific context in code comments or docstrings when helpful.**

## Security & Privacy
- **Never display, log, or commit secrets, API keys, or personal data.**
- **Require explicit user confirmation for destructive or production-affecting actions.**

## Example: Output Format for a TypeScript Function
```typescript
/**
 * Calculates the sum of two numbers.
 * @param a - First number
 * @param b - Second number
 * @returns The sum of a and b
 */
export function add(a: number, b: number): number {
  return a + b;
}
```

## Example: To-Do List for Multi-Step Task
```json
[
  {"id": "analyze-requirements", "content": "Analyze requirements", "status": "pending", "dependencies": []},
  {"id": "implement-feature", "content": "Implement feature", "status": "pending", "dependencies": ["analyze-requirements"]},
  {"id": "test-feature", "content": "Test implementation", "status": "pending", "dependencies": ["implement-feature"]}
]
```

## References
- [OpenAI Platform Docs](https://platform.openai.com/docs/)
- [Continue Hub: Creating Rule Blocks](https://blog.continue.dev/creating-rule-blocks-on-continue-hub-a-developers-guide/)
- [Guide to Building Effective Custom GPTs](https://medium.com/design-bootcamp/guide-to-building-effective-custom-gpts-cf8d464ffbc1)
- [Cursor Official Docs: Rules for AI](https://docs.cursor.com/context/rules-for-ai)
- [Cursor 101: Customizing AI Behavior](https://cursor101.com/article/cursor-rules-customizing-ai-behavior)
